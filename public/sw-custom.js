// Custom Service Worker logika offline t√°mogat√°shoz
const getBasePath = () => {
  // A service worker scope-b√≥l hat√°rozzuk meg a base path-et
  const scope = self.registration.scope;
  const basePath = scope.replace(self.location.origin, '');
  return basePath.endsWith('/') ? basePath.slice(0, -1) : basePath;
};

// Debug funkci√≥
const logCacheStatus = async () => {
  try {
    const cacheNames = await caches.keys();
    console.log('El√©rhet≈ë cache-ek:', cacheNames);
    
    for (const cacheName of cacheNames) {
      const cache = await caches.open(cacheName);
      const keys = await cache.keys();
      console.log(`Cache "${cacheName}" tartalma:`, keys.map(req => req.url));
    }
  } catch (error) {
    console.error('Cache debug hiba:', error);
  }
};

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'CACHE_MAIN_PAGE') {
    // Cache-elj√ºk a f≈ëoldalt
    const basePath = getBasePath();
    caches.open('main-page-cache').then(cache => {
      cache.add(basePath + '/').catch(err => console.log('F≈ëoldal cache-el√©se sikertelen:', err));
    });
  }
});

// Fetch esem√©ny kezel√©se offline t√°mogat√°shoz
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);
  const basePath = getBasePath();
  
  // Ellen≈ërizz√ºk, hogy a request URL t√°mogatott-e a cache API sz√°m√°ra
  if (url.protocol === 'chrome-extension:' || 
      url.protocol === 'moz-extension:' || 
      url.protocol === 'safari-extension:' ||
      url.protocol === 'ms-browser-extension:') {
    // B≈ëv√≠tm√©ny URL-eket nem kezelj√ºk
    return;
  }
  
  // Ha a k√©r√©s a f≈ëoldalra megy vagy navig√°ci√≥s k√©r√©s
  if (event.request.mode === 'navigate' || 
      event.request.url.endsWith('/') || 
      event.request.url.endsWith('/index.html') ||
      event.request.url.includes('index.html') ||
      // Assets f√°jlok kezel√©se (JS, CSS)
      url.pathname.includes('/assets/') ||
      url.pathname.endsWith('.js') ||
      url.pathname.endsWith('.css')) {
    
    event.respondWith(
      caches.match(event.request).then(response => {
        // Ha van cache-ben, haszn√°ljuk azt
        if (response) {
          console.log('Cache-b≈ël bet√∂lt√©s:', event.request.url);
          return response;
        }
        
        // Ha nincs cache-ben, pr√≥b√°ljuk meg a h√°l√≥zatr√≥l
        return fetch(event.request).then(networkResponse => {
          // Ha a h√°l√≥zat el√©rhet≈ë, cache-elj√ºk √©s adjuk vissza
          if (networkResponse.ok && event.request.method === 'GET') {
            const responseClone = networkResponse.clone();
            caches.open('main-page-cache').then(cache => {
              // Biztons√°gos cache-el√©s - csak GET k√©r√©seket √©s t√°mogatott protokollokat
              if (event.request.url.startsWith('http') || event.request.url.startsWith('https')) {
                cache.put(event.request, responseClone).catch(err => {
                  console.log('Cache-el√©s sikertelen:', event.request.url, err);
                });
              }
            });
          }
          return networkResponse;
        }).catch(() => {
          // Ha a h√°l√≥zat sem el√©rhet≈ë, pr√≥b√°ljuk meg az index.html-t cache-b≈ël
          console.log('Offline m√≥d - index.html bet√∂lt√©se cache-b≈ël');
          const basePath = getBasePath();
          
          return caches.match(basePath + '/index.html').then(indexResponse => {
            if (indexResponse) {
              console.log('Index.html cache-b≈ël bet√∂ltve');
              return indexResponse;
            }
            // Ha nincs index.html sem cache-ben, pr√≥b√°ljuk meg az offline.html-t
            return caches.match(basePath + '/offline.html').then(offlineResponse => {
              if (offlineResponse) {
                console.log('Offline.html cache-b≈ël bet√∂ltve');
                return offlineResponse;
              }
              // Ha nincs semmi cache-ben, pr√≥b√°ljuk meg a precache-b≈ël
              console.log('Precache-b≈ël bet√∂lt√©s pr√≥b√°l√°sa');
              return caches.match(event.request).then(precacheResponse => {
                if (precacheResponse) {
                  console.log('Precache-b≈ël bet√∂ltve:', event.request.url);
                  return precacheResponse;
                }
                
                // Ha m√©g mindig nincs, adjunk vissza egy egyszer≈± HTML-t
                console.log('Fallback HTML gener√°l√°sa');
                return new Response(`
                  <!DOCTYPE html>
                  <html>
                  <head>
                    <title>Offline - B8 Pool App</title>
                    <meta charset="UTF-8">
                    <meta name="viewport" content="width=device-width, initial-scale=1.0">
                    <style>
                      body { font-family: Arial, sans-serif; text-align: center; padding: 50px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
                      .container { max-width: 400px; margin: 0 auto; }
                      .btn { background: rgba(255, 255, 255, 0.2); color: white; padding: 10px 20px; border: 2px solid rgba(255, 255, 255, 0.3); border-radius: 25px; cursor: pointer; }
                      .btn:hover { background: rgba(255, 255, 255, 0.3); }
                    </style>
                  </head>
                  <body>
                    <div class="container">
                      <h1>üì± Offline m√≥d</h1>
                      <p>Az alkalmaz√°s offline m√≥dban m≈±k√∂dik.</p>
                      <button class="btn" onclick="window.location.reload()">√öjrat√∂lt√©s</button>
                    </div>
                  </body>
                  </html>
                `, {
                  headers: { 'Content-Type': 'text/html' }
                });
              });
            });
          });
        });
      })
    );
  }
});

// Install esem√©ny - cache-elj√ºk a fontos f√°jlokat
self.addEventListener('install', (event) => {
  console.log('Service Worker install√°l√°s...');
  event.waitUntil(
    caches.open('main-page-cache').then(cache => {
      console.log('Cache megnyitva, f√°jlok hozz√°ad√°sa...');
      const basePath = getBasePath();
      
      const filesToCache = [
        basePath + '/',
        basePath + '/index.html',
        basePath + '/offline.html',
        basePath + '/pwa-192x192.png',
        basePath + '/pwa-512x512.png',
        basePath + '/manifest.webmanifest'
      ];
      
      console.log('Cache-elend≈ë f√°jlok:', filesToCache);
      
      return cache.addAll(filesToCache).then(() => {
        console.log('Fontos f√°jlok cache-elve');
        // Azonnal aktiv√°ljuk a service worker-t
        return self.skipWaiting();
      }).catch(error => {
        console.log('N√©h√°ny f√°jl cache-el√©se sikertelen:', error);
        // M√©g akkor is aktiv√°ljuk, ha n√©h√°ny f√°jl nem siker√ºlt
        return self.skipWaiting();
      });
    })
  );
});

// Activate esem√©ny - r√©gi cache-ek t√∂rl√©se
self.addEventListener('activate', (event) => {
  console.log('Service Worker aktiv√°l√°s...');
  event.waitUntil(
    caches.keys().then(cacheNames => {
      console.log('Cache-ek:', cacheNames);
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== 'main-page-cache' && 
              cacheName !== 'players-cache' && 
              cacheName !== 'competitions-cache' &&
              cacheName !== 'images-cache' &&
              cacheName !== 'static-resources-cache') {
            console.log('R√©gi cache t√∂rl√©se:', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      console.log('Service Worker aktiv√°lva, clients claim...');
      // Debug: cache √°llapot ki√≠r√°sa
      logCacheStatus();
      // Azonnal √°tvessz√ºk a kontrollt
      return self.clients.claim();
    })
  );
});
